// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: grpc_server/metadata/metadata.proto

package metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MapData_GetDistance_FullMethodName = "/metadata.MapData/GetDistance"
)

// MapDataClient is the client API for MapData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapDataClient interface {
	GetDistance(ctx context.Context, in *GetDistanceRequest, opts ...grpc.CallOption) (*GetDistanceReply, error)
}

type mapDataClient struct {
	cc grpc.ClientConnInterface
}

func NewMapDataClient(cc grpc.ClientConnInterface) MapDataClient {
	return &mapDataClient{cc}
}

func (c *mapDataClient) GetDistance(ctx context.Context, in *GetDistanceRequest, opts ...grpc.CallOption) (*GetDistanceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDistanceReply)
	err := c.cc.Invoke(ctx, MapData_GetDistance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapDataServer is the server API for MapData service.
// All implementations must embed UnimplementedMapDataServer
// for forward compatibility.
type MapDataServer interface {
	GetDistance(context.Context, *GetDistanceRequest) (*GetDistanceReply, error)
	mustEmbedUnimplementedMapDataServer()
}

// UnimplementedMapDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMapDataServer struct{}

func (UnimplementedMapDataServer) GetDistance(context.Context, *GetDistanceRequest) (*GetDistanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistance not implemented")
}
func (UnimplementedMapDataServer) mustEmbedUnimplementedMapDataServer() {}
func (UnimplementedMapDataServer) testEmbeddedByValue()                 {}

// UnsafeMapDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapDataServer will
// result in compilation errors.
type UnsafeMapDataServer interface {
	mustEmbedUnimplementedMapDataServer()
}

func RegisterMapDataServer(s grpc.ServiceRegistrar, srv MapDataServer) {
	// If the following call pancis, it indicates UnimplementedMapDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MapData_ServiceDesc, srv)
}

func _MapData_GetDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapDataServer).GetDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapData_GetDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapDataServer).GetDistance(ctx, req.(*GetDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapData_ServiceDesc is the grpc.ServiceDesc for MapData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.MapData",
	HandlerType: (*MapDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDistance",
			Handler:    _MapData_GetDistance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_server/metadata/metadata.proto",
}
